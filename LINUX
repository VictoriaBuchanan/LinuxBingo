#!/bin/bash

# GLOBAL VARIABLE
declare -A bingoCard
seed=$(head -n 1 $1);
declare -a randNums;
firstrun=0;
range=$((75-1+1));

# FUNCTIONS
checkWinner(){
	if [[ "${bingoCard[0,0]}" =~ [m] ]] && [[ "${bingoCard[4,0]}" =~ [m] ]] && [[ "${bingoCard[0,4]}" =~ [m] ]] && [[ "${bingoCard[4,4]}" =~ [m] ]]; then
		echo "WINNER";
		exit 0;
	fi
	for ((i=0;i<5;i++)) do
		if [[ "${bingoCard[$i,0]}" =~ [m] ]] && [[ "${bingoCard[$i,1]}" =~ [m] ]] && [[ "${bingoCard[$i,2]}" =~ [m] ]] && [[ "${bingoCard[$i,3]}" =~ [m] ]] && [[ "${bingoCard[$i,4]}" =~ [m] ]]; then
			echo "WINNER";
			exit 0;
		fi
	done
	for ((j=0;j<5;j++)) do
		if [[ "${bingoCard[0,$j]}" =~ [m] ]] && [[ "${bingoCard[1,$j]}" =~ [m] ]] && [[ "${bingoCard[2,$j]}" =~ [m] ]] && [[ "${bingoCard[3,$j]}" =~ [m] ]] && [[ "${bingoCard[4,$j]}" =~ [m] ]]; then
			echo "WINNER";
			exit 0;
		fi
	done
}

createMatrix(){
# Takes 1 input. $1 = the name of the file with the seed number and bingo card
	for ((i=2; i<7; i++ )) do
		local row=$(sed -n "${i}p" $1 );
		local count=0;
		for number in $row; do
			bingoCard["$(($i-2)),$count"]="$number";
			count=$((count+1));
		done	
	done
}

generateLetter(){
# Takes 1 input. A randomly generated number between 1 and 75
	if [ $1 -ge 1 ] && [ $1 -le 15 ]; then
		echo "L";
	elif [ $1 -ge 16 ] && [ $1 -le 30 ]; then
		echo "I";
	elif [ $1 -ge 31 ] && [ $1 -le 45 ]; then
		echo "N";
	elif [ $1 -ge 46 ] && [ $1 -le 60 ]; then
		echo "U";
	else
		echo "X";
	fi
}

uniqueCall(){
	noDuplicate="false";
	while [[ "$noDuplicate" =~ "false" ]]; do
		newRandNum=$(($(($RANDOM%$range))+1));
		noDuplicate="true";
			for ((i=0; i<"${#randNums[@]}"; i++)); do
				if [ "$newRandNum" = "${randNums[$i]}" ]; then
					noDuplicate="false";
				fi
			done
		if   [[ "$noDuplicate" =~ "true" ]]; then
			if [ "$newRandNum" -le 9 ]; then
				randNums+=("0$newRandNum");
				updateCard "0$newRandNum";
			else
				randNums+=($newRandNum);
				updateCard "$newRandNum";
			fi
		fi
	done

}

updateCard(){
# Takes 1 input. The newly generated random number to check if it is in the bingo card.	
	for ((i=0; i<5; i++)) do
		for ((j=0; j<5; j++)) do
			if [ "$1" = "${bingoCard[$i,$j]}" ]; then
				bingoCard[$i,$j]="${bingoCard[$i,$j]}m";
			fi
		done
	done
	
}

validateColumns(){
	for ((j=0; j<5; j++)) do
		local -a colArray;
		for ((i=0; i<5; i++)) do
			colArray+=(${bingoCard[$i,$j]});
		done
		if [ "${colArray[0]}" -eq "${colArray[1]}" ] || [ "${colArray[0]}" -eq "${colArray[2]}" ] || [ "${colArray[0]}" -eq "${colArray[3]}" ] ||  [ "${colArray[0]}" -eq "${colArray[4]}" ]; then
			echo "card format error" >&2;
			exit 4;
		elif [ "${colArray[1]}" -eq "${colArray[2]}" ] || [ "${colArray[1]}" -eq "${colArray[3]}" ] || [ "${colArray[1]}" -eq "${colArray[4]}" ]; then
			echo "card format error" >&2;
			exit 4;
		elif [ "${colArray[2]}" -eq "${colArray[3]}" ] || [ "${colArray[2]}" -eq "${colArray[4]}" ]; then
			echo "card format error" >&2;
			exit 4;
		elif [ "${colArray[3]}" -eq "${colArray[4]}" ]; then
			echo "card format error" >&2;
			exit 4;
		fi 
		unset colArray;
	done
}

validateLineNumber(){
# Takes 1 input. $1 = the name of the file with the seed number and bingo card
	local lineNum=$(wc -l < $1);
	if !  [ $lineNum -eq 6 ] ; then
		echo "input file must have 6 lines" >/dev/stderr;
		exit 2;
	fi
}

validateLineFormat(){
# Takes 1 input. $1 = the name of the file with the seed number and bingo card
	for ((i=2; i<7; i++)) do
		local row=$(sed -n "${i}p" $1 );
		if  ! [[ "$row" =~ ^[0-9]{2}[[:space:]][0-9]{2}[[:space:]][0-9]{2}[[:space:]][0-9]{2}[[:space:]][0-9]{2}$ ]]; then
			echo "card format error" >/dev/stderr;
			exit 4;
		fi
	done
}

validateRows(){
	for ((i=0; i<5; i++)) do
		for ((j=0; j<5; j++)) do
			case $j in
			0) 
				if [ "${bingoCard[$i,$j]}" -lt 1 ] || [ "${bingoCard[$i,$j]}" -gt 15 ]; then
					echo "card format error" >&2;
					exit 4;
				fi;;
			1) 
				if [ "${bingoCard[$i,$j]}" -lt 16 ] || [ "${bingoCard[$i,$j]}" -gt 30 ]; then
					echo "card format error" >&2;
					exit 4;
				fi;;
			2) 
				if [ "$i" -eq 2 ]; then
					if [[ ! "${bingoCard[$i,$j]}"  =~ [0][0] ]]; then
						echo "card format error" >&2;
						exit 4;
					fi
				elif [ "${bingoCard[$i,$j]}" -lt 31 ] || [ "${bingoCard[$i,$j]}" -gt 45 ]; then
					echo "card format error"  >&2;
					exit 4; 
				fi;;
			3) 
				if [ "${bingoCard[$i,$j]}" -lt 46 ] || [ "${bingoCard[$i,$j]}" -gt 60 ]; then
					echo "card format error" >&2;
					exit 4;
				fi;;
			4) 
				if [ "${bingoCard[$i,$j]}" -lt 61 ] || [ "${bingoCard[$i,$j]}" -gt 75 ]; then
					echo "card format error" >&2;
					exit 4;
				fi;;
			*) 
				echo "unknown error"
				exit 5;;
			esac
		done
	done 
}

validateSeed(){
# Takes 1 input. The seed number.	
	if [[ "$1" =~ ^[[:blank:]]+  ]] || [[ "$1" =~ [[:blank:]]+$ ]]; then
		echo "seed line format error" >/dev/stderr;
		exit 3;
	elif ! [[ "$1" =~ ^[0-9]+$ ]]; then
		echo "seed line format error" >/dev/stderr;
		exit 3;
	fi	
}

# MAIN PROGRAM
if [ $# -eq 0 ]; then
	echo "input file missing or unreadable" >/dev/stderr;
	exit 1;
elif [[ ! -f $1 ]]; then
	echo "input file missing or unreadable" >/dev/stderr;
	exit 1;
fi
validateSeed "$seed"; 
validateLineNumber $1
validateLineFormat $1
createMatrix $1
validateColumns
validateRows
RANDOM=$seed;
bingoCard[2,2]="00m";

while true; do
	if [ $firstrun -ne 0 ]; then
		uniqueCall
	else 
		firstrun=1;
	fi 
	callString="CALL LIST: ";
	for number in "${randNums[@]}"; do
		letter=$(generateLetter $number);
		callString=$callString"$letter$number ";
	done
	
	printf "$callString \n";
	printf "%-4s%-4s%-4s%-4s%-4s\n" " L" " I" " N" " U" " X";
	printf "%-4s%-4s%-4s%-4s%-4s\n" "${bingoCard[0,0]}" "${bingoCard[0,1]}" "${bingoCard[0,2]}" "${bingoCard[0,3]}" "${bingoCard[0,4]}";
	printf "%-4s%-4s%-4s%-4s%-4s\n" "${bingoCard[1,0]}" "${bingoCard[1,1]}" "${bingoCard[1,2]}" "${bingoCard[1,3]}" "${bingoCard[1,4]}";
	printf "%-4s%-4s%-4s%-4s%-4s\n" "${bingoCard[2,0]}" "${bingoCard[2,1]}" "${bingoCard[2,2]}" "${bingoCard[2,3]}" "${bingoCard[2,4]}";
	printf "%-4s%-4s%-4s%-4s%-4s\n" "${bingoCard[3,0]}" "${bingoCard[3,1]}" "${bingoCard[3,2]}" "${bingoCard[3,3]}" "${bingoCard[3,4]}";
	printf "%-4s%-4s%-4s%-4s%-4s\n" "${bingoCard[4,0]}" "${bingoCard[4,1]}" "${bingoCard[4,2]}" "${bingoCard[4,3]}" "${bingoCard[4,4]}";
	checkWinner
	read -p "enter any key to get a call or q to quit: " ans 
	case $ans in
		[Qq]*) exit 0;;
	esac
	string=$(checkWinner)
	echo "$string";
	clear;
done
echo "This should not be running with errors";
